// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String   @id @default(uuid())
  name          String?  @unique
  email         String
  emailVerified  Boolean   @default(false)
  password      String
  mobileNo      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt()
  status        String   @default("ACTIVE")

  refreshToken          RefreshToken[]
  emailVerificationToken EmailVerificationToken?
  address               Address?
  contact               Contact[]       @relation(name: "UserContact")
  addedBy               Contact[]       @relation(name: "UserAsContact")
  user1                 Conversation[]  @relation(name: "User1Contact")
  user2                 Conversation[]  @relation(name: "User2Contact")

  @@index([email])
  @@unique([email])
  @@unique([mobileNo])
}

model EmailVerificationToken {
  id            String   @id @default(uuid())
  userId        String   @unique
  token         String  
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt()
  user          User  @relation(fields: [userId], references: [userId],onDelete: Cascade)

  @@unique([userId,token])
}

model RefreshToken {
  id            String   @id @default(uuid())
  userId        String
  token         String  @unique
  userAgent     String?
  expiresAt     DateTime
  createdAt     DateTime  @default(now())

  user          User  @relation(fields: [userId], references: [userId],onDelete: Cascade)

  @@index([userId])
}

model Address {
  addressId       String   @id @default(uuid())
  userId          String   @unique
  line1           String
  line2           String?
  city            String
  state           String
  zipCode         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt()
  user            User      @relation(fields: [userId], references: [userId],onDelete: Cascade)

  @@index([addressId,userId])
}

model Contact {
  id              String  @id @default(uuid())
  userId          String
  contactId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt()

  user            User @relation(fields: [userId], references: [userId], name: "UserContact")
  contact         User @relation(fields: [contactId], references: [userId], name: "UserAsContact")

  @@unique([userId, contactId])
}

model Conversation {
  id              String  @id @default(uuid())
  user1Id         String
  user2Id         String
  hiddenForUserIds String[] @default([])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt()
  message         Message[]
  metadata        ConversationMetaData?

  user1           User  @relation(fields: [user1Id], references: [userId], name:"User1Contact")
  user2           User  @relation(fields: [user2Id], references: [userId], name:"User2Contact")

  @@index([user1Id, user2Id])
  @@unique([user1Id, user2Id])
}

model ConversationMetaData {
  conversationId     String  @id
  lastMessageId      String
  lastMessageCreatedAt DateTime @default(now())
  updatedAt            DateTime @updatedAt()

  conversation       Conversation? @relation(fields: [conversationId], references: [id])

  @@index([conversationId])
  @@index([lastMessageId])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

model Message {
  id                String  @id @default(uuid())
  senderId          String
  receiverId        String
  conversationId    String
  type              MessageType @default(TEXT)
  isSent            Boolean @default(false)
  isViewed          Boolean @default(false)
  content           String?
  mediaUrl          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt()

  conversation      Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId])
  @@index([senderId, receiverId, isSent])
  @@index([senderId, receiverId, isViewed])
  @@index([conversationId])
}




